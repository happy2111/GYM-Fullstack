import api from "../http/index.js";

class UsersService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @param {Object} params
   * @param {number} params.page - —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
   * @param {number} params.limit - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
   * @param {string} params.sortBy - –ø–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (created_at, name, email)
   * @param {"asc"|"desc"} params.sortOrder - –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  async getAllUsers({
                      page = 1,
                      limit = 20,
                      sortBy = "created_at",
                      sortOrder = "desc",
                      search = "" // üëà –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
                    } = {}) {
    try {
      const response = await api.get("/users/all", {
        params: {
          page,
          limit,
          sortBy,
          sortOrder,
          ...(search && { search }) // üëà –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–æ
        },
      });

      return {
        users: response.data.data,
        pagination: response.data.pagination,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
      throw error; // –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    }
  }


  async getUserStats() {
    try {
      const response = await api.get("/users/stats");
      return response.data?.data;
    } catch (error) {
      console.error(error)
    }
  }


}

export default new UsersService();
